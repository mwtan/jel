// $ANTLR 2.7.3: statement.tree.g -> StatementTreeParserTokenTypes.txt$
StatementTreeParser    // output token vocab name
BLOCK=4
OBJBLOCK=5
SLIST=6
CTOR_DEF=7
METHOD_DEF=8
VARIABLE_DEF=9
INSTANCE_INIT=10
PARAMETERS=11
PARAMETER_DEF=12
LABELED_STAT=13
INDEX_OP=14
POST_INC=15
POST_DEC=16
METHOD_CALL=17
EXPR=18
UNARY_MINUS=19
UNARY_PLUS=20
CASE_GROUP=21
ELIST=22
FOR_INIT=23
FOR_CONDITION=24
FOR_ITERATOR=25
SUPER_CTOR_CALL=26
CTOR_CALL=27
IDENT=28
DOT=29
LCURLY=30
RCURLY=31
SEMI=32
LITERAL_if="if"=33
LPAREN=34
RPAREN=35
LITERAL_else="else"=36
LITERAL_for="for"=37
LITERAL_while="while"=38
LITERAL_do="do"=39
LITERAL_break="break"=40
LITERAL_continue="continue"=41
LITERAL_return="return"=42
LITERAL_switch="switch"=43
LITERAL_case="case"=44
LITERAL_default="default"=45
COLON=46
COMMA=47
ASSIGN=48
PLUS_ASSIGN=49
MINUS_ASSIGN=50
STAR_ASSIGN=51
DIV_ASSIGN=52
MOD_ASSIGN=53
SR_ASSIGN=54
BSR_ASSIGN=55
SL_ASSIGN=56
BAND_ASSIGN=57
BXOR_ASSIGN=58
BOR_ASSIGN=59
QUESTION=60
LOR=61
LAND=62
BOR=63
BXOR=64
BAND=65
NOT_EQUAL=66
EQUAL=67
LT=68
GT=69
LE=70
GE=71
LITERAL_instanceof="instanceof"=72
SL=73
SR=74
BSR=75
PLUS=76
MINUS=77
STAR=78
DIV=79
MOD=80
INC=81
DEC=82
BNOT=83
LNOT=84
LITERAL_class="class"=85
LITERAL_true="true"=86
LITERAL_false="false"=87
LITERAL_null="null"=88
LITERAL_new="new"=89
NUM_INT=90
CHAR_LITERAL=91
STRING_LITERAL=92
NUM_FLOAT=93
NUM_LONG=94
NUM_DOUBLE=95
WS=96
SL_COMMENT=97
ML_COMMENT=98
ESC=99
HEX_DIGIT=100
VOCAB=101
EXPONENT=102
FLOAT_SUFFIX=103
EMPTY_STAT=104
